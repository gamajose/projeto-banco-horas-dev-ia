<!-- Top Navigation Bar -->
<header class="bg-white border-b border-gray-200 shadow-sm sticky top-0 z-30">
    <div class="px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
            <!-- Page Title and Breadcrumbs -->
            <div class="flex items-center space-x-4">
                <div class="hidden lg:block">
                    <nav class="breadcrumb">
                        <% if (typeof breadcrumbs !== 'undefined' && breadcrumbs.length > 0) { %>
                            <% breadcrumbs.forEach((crumb, index) => { %>
                                <% if (index > 0) { %>
                                    <i class="fas fa-chevron-right text-gray-400 text-xs"></i>
                                <% } %>
                                <% if (crumb.url && index < breadcrumbs.length - 1) { %>
                                    <a href="<%= crumb.url %>" class="breadcrumb-item">
                                        <%= crumb.title %>
                                    </a>
                                <% } else { %>
                                    <span class="breadcrumb-item active">
                                        <%= crumb.title %>
                                    </span>
                                <% } %>
                            <% }); %>
                        <% } else { %>
                            <span class="breadcrumb-item active">
                                <%= title || 'Dashboard' %>
                            </span>
                        <% } %>
                    </nav>
                </div>
                
                <!-- Mobile Page Title -->
                <div class="lg:hidden">
                    <h1 class="text-lg font-semibold text-gray-900">
                        <%= title || 'Dashboard' %>
                    </h1>
                </div>
            </div>

            <!-- Right Side Actions -->
            <div class="flex items-center space-x-4">
                <!-- Search -->
                <div class="hidden md:block relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                    <input type="text" 
                           id="global-search"
                           placeholder="Pesquisar..." 
                           class="w-64 pl-10 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 transition-colors">
                </div>

                <!-- Notifications -->
                <div class="relative">
                    <button id="notifications-btn" class="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors relative">
                        <i class="fas fa-bell text-lg"></i>
                        <% if (locals.unreadNotifications > 0) { %>
                            <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center animate-pulse">
                                <%= locals.unreadNotifications %>
                            </span>
                        <% } %>
                    </button>

                    <!-- Notifications Dropdown -->
                    <div id="notifications-dropdown" class="absolute right-0 mt-2 w-80 bg-white rounded-xl shadow-lg border border-gray-200 py-2 hidden z-50">
                        <div class="px-4 py-3 border-b border-gray-100">
                            <h3 class="text-sm font-semibold text-gray-900">Notificações</h3>
                        </div>
                        <div class="max-h-96 overflow-y-auto">
                            <!-- Notification items will be loaded here -->
                            <div class="p-4 text-center text-gray-500 text-sm">
                                Carregando notificações...
                            </div>
                        </div>
                        <div class="border-t border-gray-100 px-4 py-2">
                            <a href="/notifications" class="text-sm text-red-600 hover:text-red-700 font-medium">
                                Ver todas as notificações
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions Dropdown -->
                <div class="relative">
                    <button id="quick-actions-btn" class="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-plus text-lg"></i>
                    </button>

                    <!-- Quick Actions Dropdown -->
                    <div id="quick-actions-dropdown" class="absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-lg border border-gray-200 py-2 hidden z-50">
                        <div class="px-4 py-2 border-b border-gray-100">
                            <h3 class="text-sm font-semibold text-gray-900">Ações Rápidas</h3>
                        </div>
                        <a href="/quick/registrar-entrada" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                            <div class="w-8 h-8 bg-emerald-100 rounded-lg flex items-center justify-center mr-3">
                                <i class="fas fa-sign-in-alt text-emerald-600"></i>
                            </div>
                            Registrar Entrada
                        </a>
                        <a href="/quick/registrar-saida" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                            <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center mr-3">
                                <i class="fas fa-sign-out-alt text-red-600"></i>
                            </div>
                            Registrar Saída
                        </a>
                        <a href="/quick/solicitar-ajuste" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                                <i class="fas fa-edit text-blue-600"></i>
                            </div>
                            Solicitar Ajuste
                        </a>
                        <% if (user && user.is_staff) { %>
                            <div class="border-t border-gray-100 my-1"></div>
                            <a href="/admin/colaboradores/novo" class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                                    <i class="fas fa-user-plus text-purple-600"></i>
                                </div>
                                Novo Colaborador
                            </a>
                        <% } %>
                    </div>
                </div>

                <!-- Current Time Display -->
                <div class="hidden md:flex items-center text-sm text-gray-600 bg-gray-50 px-3 py-2 rounded-lg">
                    <i class="fas fa-clock mr-2 text-gray-400"></i>
                    <span id="current-time">--:--</span>
                </div>

                <!-- User Status -->
                <div class="hidden lg:flex items-center space-x-2">
                    <div class="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                    <span class="text-sm text-gray-600">Online</span>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Current time display
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
            });
            const timeElement = document.getElementById('current-time');
            if (timeElement) {
                timeElement.textContent = timeString;
            }
        }
        
        // Update time every second
        updateTime();
        setInterval(updateTime, 1000);

        // Notifications dropdown
        const notificationsBtn = document.getElementById('notifications-btn');
        const notificationsDropdown = document.getElementById('notifications-dropdown');
        
        if (notificationsBtn && notificationsDropdown) {
            notificationsBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                notificationsDropdown.classList.toggle('hidden');
                
                // Load notifications if dropdown is opened
                if (!notificationsDropdown.classList.contains('hidden')) {
                    loadNotifications();
                }
            });
        }

        // Quick actions dropdown
        const quickActionsBtn = document.getElementById('quick-actions-btn');
        const quickActionsDropdown = document.getElementById('quick-actions-dropdown');
        
        if (quickActionsBtn && quickActionsDropdown) {
            quickActionsBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                quickActionsDropdown.classList.toggle('hidden');
            });
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function() {
            if (notificationsDropdown) notificationsDropdown.classList.add('hidden');
            if (quickActionsDropdown) quickActionsDropdown.classList.add('hidden');
        });

        // Prevent dropdown close when clicking inside
        [notificationsDropdown, quickActionsDropdown].forEach(dropdown => {
            if (dropdown) {
                dropdown.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            }
        });

        // Global search functionality
        const globalSearch = document.getElementById('global-search');
        if (globalSearch) {
            let searchTimeout;
            globalSearch.addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                const query = e.target.value.trim();
                
                if (query.length > 2) {
                    searchTimeout = setTimeout(function() {
                        performGlobalSearch(query);
                    }, 500);
                }
            });
            
            // Search on Enter key
            globalSearch.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const query = e.target.value.trim();
                    if (query.length > 0) {
                        performGlobalSearch(query);
                    }
                }
            });
        }
    });

    // Load notifications function
    async function loadNotifications() {
        try {
            const response = await fetch('/api/notifications/recent');
            const data = await response.json();
            
            const container = document.querySelector('#notifications-dropdown .max-h-96');
            if (data.notifications && data.notifications.length > 0) {
                container.innerHTML = data.notifications.map(notification => `
                    <div class="flex items-start p-4 hover:bg-gray-50 ${notification.read ? '' : 'bg-red-50/50'}">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-${notification.type === 'approval' ? 'blue' : notification.type === 'warning' ? 'amber' : 'emerald'}-100 rounded-lg flex items-center justify-center">
                                <i class="fas fa-${notification.icon || 'bell'} text-${notification.type === 'approval' ? 'blue' : notification.type === 'warning' ? 'amber' : 'emerald'}-600 text-sm"></i>
                            </div>
                        </div>
                        <div class="ml-3 flex-1">
                            <p class="text-sm text-gray-900 font-medium">${notification.title}</p>
                            <p class="text-xs text-gray-600 mt-1">${notification.message}</p>
                            <p class="text-xs text-gray-400 mt-1">${formatRelativeTime(notification.created_at)}</p>
                        </div>
                        ${!notification.read ? '<div class="flex-shrink-0"><div class="w-2 h-2 bg-red-500 rounded-full"></div></div>' : ''}
                    </div>
                `).join('');
            } else {
                container.innerHTML = `
                    <div class="p-4 text-center text-gray-500 text-sm">
                        <i class="fas fa-bell-slash text-2xl text-gray-300 mb-2"></i>
                        <p>Nenhuma notificação</p>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Error loading notifications:', error);
            const container = document.querySelector('#notifications-dropdown .max-h-96');
            container.innerHTML = `
                <div class="p-4 text-center text-red-500 text-sm">
                    Erro ao carregar notificações
                </div>
            `;
        }
    }

    // Global search function
    async function performGlobalSearch(query) {
        try {
            showLoading();
            const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
            const data = await response.json();
            
            // You can customize how search results are displayed
            // For now, we'll redirect to a search results page
            window.location.href = `/search?q=${encodeURIComponent(query)}`;
        } catch (error) {
            console.error('Search error:', error);
            showNotification('Erro na pesquisa', 'error');
        } finally {
            hideLoading();
        }
    }

    // Format relative time
    function formatRelativeTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffInMinutes = Math.floor((now - date) / (1000 * 60));
        
        if (diffInMinutes < 1) return 'Agora mesmo';
        if (diffInMinutes < 60) return `${diffInMinutes}min atrás`;
        
        const diffInHours = Math.floor(diffInMinutes / 60);
        if (diffInHours < 24) return `${diffInHours}h atrás`;
        
        const diffInDays = Math.floor(diffInHours / 24);
        if (diffInDays < 30) return `${diffInDays}d atrás`;
        
        return date.toLocaleDateString('pt-BR');
    }
</script>