<div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">Meus Relatórios de Movimentações</h1>

    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200 mb-8">
        <form id="form-filtros" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end">
            <div>
                <label for="data_inicio" class="form-label">Data de Início</label>
                <input type="date" name="data_inicio" id="data_inicio" class="form-input">
            </div>
            <div>
                <label for="data_fim" class="form-label">Data de Fim</label>
                <input type="date" name="data_fim" id="data_fim" class="form-input">
            </div>
            <div>
                <label for="status_id" class="form-label">Status</label>
                <select name="status_id" id="status_id" class="form-input">
                    <option value="">Todos</option>
                    <% status.forEach(s => { %>
                        <option value="<%= s.id %>">
                            <%= s.nome %>
                        </option>
                    <% }) %>
                </select>
            </div>
            <div class="flex flex-col md:flex-row md:space-x-2 space-y-2 md:space-y-0">
                 <button type="submit" class="btn-primary w-full md:w-auto">Filtrar</button>
                 <button type="button" id="btn-exportar-pdf" class="btn-secondary w-full md:w-auto">PDF</button>
            </div>
        </form>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="table-header">Data</th>
                        <th class="table-header">Tipo</th>
                        <th class="table-header">Horas</th>
                        <th class="table-header">Status</th>
                        <th class="table-header">Motivo</th>
                    </tr>
                </thead>
                <tbody id="tabela-resultados" class="bg-white divide-y divide-gray-200">
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const formFiltros = document.getElementById('form-filtros');
        const tbodyResultados = document.getElementById('tabela-resultados');
        const movimentacoesIniciais = <%- JSON.stringify(movimentacoes) %>;
        const btnExportarPdf = document.getElementById('btn-exportar-pdf');

        const createRowHTML = (mov) => {
            const dataFormatada = new Date(mov.data_movimentacao).toLocaleDateString('pt-BR', { timeZone: 'UTC' });
            const tipoHTML = mov.entrada
                ? `<span class="text-green-600 font-medium">Crédito</span>`
                : `<span class="text-red-600 font-medium">Débito</span>`;
            const motivo = mov.motivo || '';
            const statusClass = mov.status_nome === 'Aprovado' ? 'bg-green-100 text-green-800' : (mov.status_nome === 'Pendente' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800');
            const statusBadge = `<p class="text-xs font-semibold px-2 py-1 rounded-full ${statusClass}">${mov.status_nome}</p>`;

            return `
            <tr>
                <td class="table-cell">${dataFormatada}</td>
                <td class="table-cell">${tipoHTML}</td>
                <td class="table-cell font-mono">${mov.hora_total}</td>
                <td class="table-cell">${statusBadge}</td>
                <td class="table-cell text-sm text-gray-500">${motivo}</td>
            </tr>
        `;
        };

        const renderTable = (data) => {
            tbodyResultados.innerHTML = '';
            if (data.length === 0) {
                tbodyResultados.innerHTML = '<tr><td colspan="5" class="table-cell text-center text-gray-500 py-6">Nenhum resultado encontrado.</td></tr>';
            } else {
                data.forEach(mov => tbodyResultados.innerHTML += createRowHTML(mov));
            }
        };

        const loadInitialData = async () => {
             try {
                const response = await fetch('/profile/api/relatorio');
                const result = await response.json();
                if (result.success) {
                    renderTable(result.movimentacoes);
                } else {
                    alert('Não foi possível carregar os dados iniciais.');
                }
            } catch (error) {
                console.error('Erro no fetch dos dados iniciais:', error);
                alert('Não foi possível carregar os dados iniciais.');
            }
        };
        
        loadInitialData();

        formFiltros.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(formFiltros);
            const params = new URLSearchParams(formData);
            try {
                const response = await fetch(`/profile/api/relatorio?${params.toString()}`);
                const result = await response.json();
                if (result.success) {
                    renderTable(result.movimentacoes);
                } else {
                    alert('Não foi possível aplicar os filtros.');
                }
            } catch (error) {
                console.error('Erro no fetch dos filtros:', error);
                alert('Não foi possível aplicar os filtros.');
            }
        });

        btnExportarPdf.addEventListener('click', () => {
            const params = new URLSearchParams(new FormData(formFiltros));
            window.open(`/profile/relatorio/exportar-pdf?${params.toString()}`, '_blank');
        });
    });
</script>