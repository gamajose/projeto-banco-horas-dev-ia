<h1 class="text-2xl font-bold text-gray-800 mb-6">Meus Relatórios de Movimentações</h1>

<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div class="stat-card bg-emerald-50">
        <div class="stat-card-icon bg-gradient-to-r from-emerald-500 to-emerald-600"><i class="fas fa-plus-circle"></i></div>
        <div id="total-positivas" class="stat-card-value text-emerald-600">+00:00</div>
        <div class="stat-card-label">Total de Créditos (Aprovados)</div>
    </div>
    
    <div class="stat-card bg-red-50">
        <div class="stat-card-icon bg-gradient-to-r from-red-500 to-red-600"><i class="fas fa-minus-circle"></i></div>
        <div id="total-negativas" class="stat-card-value text-red-600">-00:00</div>
        <div class="stat-card-label">Total de Débitos (Aprovados)</div>
    </div>
    <div class="stat-card bg-blue-50">
        <div class="stat-card-icon bg-gradient-to-r from-blue-500 to-blue-600"><i class="fas fa-balance-scale"></i></div>
        <div id="saldo-total" class="stat-card-value text-blue-800">00:00</div>
        <div class="stat-card-label">Saldo do Período (Aprovado)</div>
    </div>
</div>

<div class="card mb-6">
    <div class="card-body">
        <form id="form-filtros" class="flex flex-col sm:flex-row flex-wrap items-end gap-4">
            <div class="flex-1 min-w-0">
                <label for="data_inicio" class="form-label">Data de Início</label>
                <input type="date" name="data_inicio" id="data_inicio" class="form-input">
            </div>
            <div class="flex-1 min-w-0">
                <label for="data_fim" class="form-label">Data de Fim</label>
                <input type="date" name="data_fim" id="data_fim" class="form-input">
            </div>
            <div class="flex-1 min-w-0">
                <label for="status_id" class="form-label">Status</label>
                <select name="status_id" id="status_id" class="form-input">
                    <option value="">Todos</option>
                    <% status.forEach(s => { %>
                        <option value="<%= s.id %>">
                            <%= s.nome %>
                        </option>
                    <% }) %>
                </select>
            </div>
            
            <div class="flex-shrink-0 flex space-x-2 w-full sm:w-auto">
                <button type="submit" class="btn-primary w-full sm:w-auto">Filtrar</button>
                <button type="button" id="btn-exportar-pdf" class="btn-secondary w-full sm:w-auto">PDF</button>
            </div>
        </form>
    </div>
</div>

<div class="card">
    <div class="card-body p-0">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="table-header">Data</th>
                        <th class="table-header">Tipo</th>
                        <th class="table-header">Horas</th>
                        <th class="table-header">Status</th>
                        <th class="table-header">Motivo</th>
                    </tr>
                </thead>
                <tbody id="tabela-resultados" class="bg-white divide-y divide-gray-200">
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- Referências aos elementos do DOM ---
        const formFiltros = document.getElementById('form-filtros');
        const tbodyResultados = document.getElementById('tabela-resultados');
        const btnExportarPdf = document.getElementById('btn-exportar-pdf');
        const totalPositivasEl = document.getElementById('total-positivas');
        const totalNegativasEl = document.getElementById('total-negativas');
        const saldoTotalEl = document.getElementById('saldo-total');

        // --- Dados Iniciais (vindos do servidor) ---
        const movimentacoesIniciais = <%- JSON.stringify(movimentacoes) %>;
        const summaryIniciais = <%- JSON.stringify(hourBalance) %>;

        // --- Funções de Renderização ---
        const createRowHTML = (mov) => {
            const dataFormatada = new Date(mov.data_movimentacao).toLocaleDateString('pt-BR', { timeZone: 'UTC' });
            const tipoHTML = mov.entrada ? `<span class="badge badge-success">Crédito</span>` : `<span class="badge badge-danger">Débito</span>`;
            const motivo = mov.motivo || '';
            const statusClass = mov.status_nome === 'Aprovado' ? 'bg-green-100 text-green-800' : (mov.status_nome === 'Pendente' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800');
            const statusBadge = `<p class="text-xs font-semibold px-2 py-1 rounded-full ${statusClass}">${mov.status_nome}</p>`;
            return `
                <tr>
                    <td class="table-cell">${dataFormatada}</td>
                    <td class="table-cell">${tipoHTML}</td>
                    <td class="table-cell font-mono">${mov.hora_total}</td>
                    <td class="table-cell">${statusBadge}</td>
                    <td class="table-cell text-sm text-gray-500">${motivo}</td>
                </tr>
            `;
        };

        // Função ÚNICA para renderizar a tabela e os cards de resumo
        const renderData = (data, summary) => {
            tbodyResultados.innerHTML = '';
            if (data.length === 0) {
                tbodyResultados.innerHTML = '<tr><td colspan="5" class="table-cell text-center text-gray-500 py-6">Nenhum resultado encontrado.</td></tr>';
            } else {
                data.forEach(mov => tbodyResultados.innerHTML += createRowHTML(mov));
            }

            if (summary) {
                totalPositivasEl.textContent = summary.totalHorasPositivas || summary.positive;
                totalNegativasEl.textContent = summary.totalHorasNegativas || summary.negative;
                saldoTotalEl.textContent = summary.saldoTotalHoras || summary.formatted;
            }
        };

        // --- Lógica de Filtros e Eventos ---
        const applyFilters = async () => {
            const formData = new FormData(formFiltros);
            const params = new URLSearchParams(formData);
            try {
                const response = await fetch(`/profile/api/relatorio?${params.toString()}`);
                const result = await response.json();
                if (result.success) {
                    renderData(result.movimentacoes, result.summary);
                } else {
                    alert('Não foi possível aplicar os filtros.');
                }
            } catch (error) {
                console.error('Erro no fetch dos filtros:', error);
                alert('Não foi possível aplicar os filtros.');
            }
        };
        
        // --- Inicialização da Página ---
        // Renderiza os dados que já vieram do servidor na primeira carga
        renderData(movimentacoesIniciais, summaryIniciais);

        // Adiciona os "escutadores" de eventos
        formFiltros.addEventListener('submit', (e) => {
            e.preventDefault();
            applyFilters();
        });

        btnExportarPdf.addEventListener('click', () => {
            const params = new URLSearchParams(new FormData(formFiltros));
            window.open(`/profile/relatorio/exportar-pdf?${params.toString()}`, '_blank');
        });
    });
</script>